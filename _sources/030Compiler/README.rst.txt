
.. raw:: html

   <!--Copyright © ZOMI 适用于[License](https://github.com/chenzomi12/DeepLearningSystem)版权许可-->

三、AI编译器原理
================

随着深度学习的应用场景的不断泛化，深度学习计算任务也需要部署在不同的计算设备和硬件架构上；同时，实际部署或训练场景对性能往往也有着更为激进的要求，例如针对硬件特点定制计算代码。

这些需求在通用的AI框架中已经难已得到满足。由于深度学习计算任务在现有的AI框架中往往以DSL（Domain
Specific
Language）的方式进行编程和表达，这本身使得深度学习计算任务的优化和执行天然符合传统计算机语言的编译和优化过程。因此，深度学习的编译与优化就是将当前的深度学习计算任务通过一层或多层中间表达进行翻译和优化，最终转化成目标硬件上的可执行代码的过程。本章将围绕现有AI编译器中的编译和优化工作的内容展开介绍。

课程简介
--------

-  《传统编译器》会粗略地回顾传统编译器中的前端、后端、IR中间表达等主要的概念，并对目前最常用的GCC和LLVM的发展历史，GCC的使用方式和LLVM的架构前后端优化划分，两大编译器GCC和LLVM进行简单的展开，去了解GCC的编译流程和编译方式，并回顾LLVM的整体架构，了解传统编译器的整体架构和脉络。

-  《AI 编译器》是本节的概览重点，去了解本章的主要内容 AI
   编译器的整体架构，包括他的发展阶段，目前主要的组成模块，整体的技术演进方向等概念性的内容，因为近年来AI编译器发展迅猛，可以横向去了解AI编译器整体技术。AI
   编译器发展时间并不长，从第一代开始到目前进入第二代，AI编译器整体架构基本上已经清晰，可是也会遇到很多挑战和技术难点。

-  《前端优化》前端优化作为 AI编译器
   的整体架构主要模块，主要优化的对象是计算图，而计算图是通过AI框架产生的，值得注意的是并不是所有的AI框架都会生成计算图，有了计算图就可以结合深度学习的原理知识进行图的优化。前端优化包括图算融合、数据排布、内存优化等跟深度学习相结合的优化手段，同时把传统编译器关于代数优化的技术引入到计算图中。

-  《后端优化》后端优化作为AI编译器跟硬件之间的相连接的模块，更多的是算子或者Kernel进行优化，而优化之前需要把计算图转换称为调度树等IR格式，AI
   编译器为了更好地跟硬件打交道，充分赋能硬件，需要后端优化来支持，于是后端针对调度树或者底层IR，在每一个算子/Kernel进行循环优化、指令优化和内存优化等技术。

-  《多面体技术》多面体不属于新的技术，反而是传统编译器的一种优化手段，得益于深度学习中的主要特征（循环、张量），因此多面体技术可以发挥更大的作用，对循环展开、内存映射等优化工作。多面体表示技术作为统一化的程序变换表示技术,
   可以通过迭代域、仿射调度、访存函数等操作对算子或者Kernel进行循环优化和内存映射优化，作为AI编译器的前言研究方向。

-  《PyTorch图模式》在充分了解AI编译器后，来深度剖析PyTorch2.0关于图模式的Dynamo是如何实现的，如何对PyTorch的后端执行进行加速。本节会以实际的AI框架
   PyTorch 2.0为主线，去把其主打特性 Dynamo 和 AOTAutograd
   进行展开，并回顾 PyTorch
   对图模式的尝试，了解现今最热门的AI框架如何进行编译器优化的。

课程细节
--------

传统编译器
~~~~~~~~~~

《传统编译器》会粗略地回顾传统编译器中的前端、后端、IR中间表达等主要的概念，并对目前最常用的GCC和LLVM的发展历史，GCC的使用方式和LLVM的架构前后端优化划分，两大编译器GCC和LLVM进行简单的展开，去了解GCC的编译流程和编译方式，并回顾LLVM的整体架构，了解传统编译器的整体架构和脉络。

+---+---------+--------------------------------------------------------+
| 分 | 名称   | 内容                                                   |
| 类 |        |                                                        |
+===+=========+========================================================+
| 编 | 01     | `silde <./01_Tradition/01.introduction.pdf>`__,        |
| 译 | 课     | `v                                                     |
| 器 | 程概述 | ideo <https://www.bilibili.com/video/BV1D84y1y73v/>`__ |
| 基 |        |                                                        |
| 础 |        |                                                        |
+---+---------+--------------------------------------------------------+
| 传 | 02     | `silde <./01_Tradition/02.history.pdf>`__,             |
| 统 | 开源   | `v                                                     |
| 编 | 编译器 | ideo <https://www.bilibili.com/video/BV1sM411C7Vr/>`__ |
| 译 | 的发展 |                                                        |
| 器 |        |                                                        |
+---+---------+--------------------------------------------------------+
| 传 | 03     | `silde <./01_Tradition/03.gcc.pdf>`__,                 |
| 统 | GCC编  | `v                                                     |
| 编 | 译过程 | ideo <https://www.bilibili.com/video/BV1LR4y1f7et/>`__ |
| 译 | 和原理 |                                                        |
| 器 |        |                                                        |
+---+---------+--------------------------------------------------------+
| 传 | 04     | `silde <./01_Tradition/04.llvm.pdf>`__,                |
| 统 | LLVM设 | `v                                                     |
| 编 | 计架构 | ideo <https://www.bilibili.com/video/BV1CG4y1V7Dn/>`__ |
| 译 |        |                                                        |
| 器 |        |                                                        |
+---+---------+--------------------------------------------------------+
| 传 | 05(上) | `silde <./01_Tradition/05.llvm_detail01.pdf>`__,       |
| 统 | LLVM   | `v                                                     |
| 编 | IR详解 | ideo <https://www.bilibili.com/video/BV1LR4y1f7et/>`__ |
| 译 |        |                                                        |
| 器 |        |                                                        |
+---+---------+--------------------------------------------------------+
| 传 | 05(中) | `silde <./01_Tradition/06.llvm_detail02.pdf>`__,       |
| 统 | LLV    | `                                                      |
| 编 | M前端和 | video <https://www.bilibili.com/video/BV1vd4y1t7vS>`__ |
| 译 | 优化层 |                                                        |
| 器 |        |                                                        |
+---+---------+--------------------------------------------------------+
| 传 | 05(下) | `silde <./01_Tradition/07.llvm_detail03.pdf>`__,       |
| 统 | LLV    | `                                                      |
| 编 | M后端代 | video <https://www.bilibili.com/video/BV1cd4y1b7ho>`__ |
| 译 | 码生成 |                                                        |
| 器 |        |                                                        |
+---+---------+--------------------------------------------------------+

AI 编译器
~~~~~~~~~

《AI 编译器》是本节的概览重点，去了解本章的主要内容 AI
编译器的整体架构，包括他的发展阶段，目前主要的组成模块，整体的技术演进方向等概念性的内容，因为近年来AI编译器发展迅猛，可以横向去了解AI编译器整体技术。AI
编译器发展时间并不长，从第一代开始到目前进入第二代，AI编译器整体架构基本上已经清晰，可是也会遇到很多挑战和技术难点。

+---+--------+---------------------------------------------------------+
| 分 | 名称  | 内容                                                    |
| 类 |       |                                                         |
+===+========+=========================================================+
| A | 01     | `silde <./02_AICompiler/01.appear.pdf>`__,              |
| I | 为什么 | `video <https://www.bilibili.com/video/BV1pM41167KP>`__ |
| 编 | 需要AI |                                                        |
| 译 | 编译器 |                                                        |
| 器 |       |                                                         |
+---+--------+---------------------------------------------------------+
| A | 02     | `silde <./02_AICompiler/02.stage.pdf>`__,               |
| I | AI编译 | `                                                       |
| 编 | 器的发 | video <https://www.bilibili.com/video/BV1QK411R7iy/>`__ |
| 译 | 展阶段 |                                                        |
| 器 |       |                                                         |
+---+--------+---------------------------------------------------------+
| A | 03     | `silde <./02_AICompiler/03.architecture.pdf>`__,        |
| I | AI编译 | `                                                       |
| 编 | 器的通 | video <https://www.bilibili.com/video/BV1qD4y1Y73e/>`__ |
| 译 | 用架构 |                                                        |
| 器 |       |                                                         |
+---+--------+---------------------------------------------------------+
| A | 04     | `silde <./02_AICompiler/04.future.pdf>`__,              |
| I | AI     | `                                                       |
| 编 | 编译器 | video <https://www.bilibili.com/video/BV1Hv4y1R7uc/>`__ |
| 译 | 的挑战 |                                                        |
| 器 | 与思考 |                                                        |
+---+--------+---------------------------------------------------------+

前端优化
~~~~~~~~

《前端优化》前端优化作为 AI编译器
的整体架构主要模块，主要优化的对象是计算图，而计算图是通过AI框架产生的，值得注意的是并不是所有的AI框架都会生成计算图，有了计算图就可以结合深度学习的原理知识进行图的优化。前端优化包括图算融合、数据排布、内存优化等跟深度学习相结合的优化手段，同时把传统编译器关于代数优化的技术引入到计算图中。

+---+-------+-----------------------------------------------------------+
| 分 | 名称 | 内容                                                      |
| 类 |      |                                                           |
+===+=======+===========================================================+
| 前 | 01   | `silde <./03_Frontend/01.introduction.pdf>`__,            |
| 端 | 内容 | `video <https://www.bilibili.com/video/BV1ne411w7n2/>`__  |
| 优 | 介绍 |                                                           |
| 化 |      |                                                           |
+---+-------+-----------------------------------------------------------+
| 前 | 02   | `silde <./03_Frontend/02.graph_ir.pdf>`__,                |
| 端 | 计   | `video <https://www.bilibili.com/video/BV1kV4y1w72W/>`__  |
| 优 | 算图 |                                                           |
| 化 | 层IR |                                                           |
+---+-------+-----------------------------------------------------------+
| 前 | 03   | `silde <./03_Frontend/03.op_fusion.pdf>`__,               |
| 端 | 算子 | `video <https://www.bilibili.com/video/BV1P24y1D7RV/>`__  |
| 优 | 融合 |                                                           |
| 化 | 策略 |                                                           |
+---+-------+-----------------------------------------------------------+
| 前 | 0    | `silde <./03_Frontend/04.layout_trans01.pdf>`__,          |
| 端 | 4(上) | `video <https://www.bilibili.com/video/BV1xK411z7Uw/>`__ |
| 优 | 布局 |                                                           |
| 化 | 转换 |                                                           |
|   | 原理  |                                                           |
+---+-------+-----------------------------------------------------------+
| 前 | 0    | `silde <./03_Frontend/04.layout_trans02.pdf>`__,          |
| 端 | 4(下) | `video <https://www.bilibili.com/video/BV1gd4y1Y7dc/>`__ |
| 优 | 布局 |                                                           |
| 化 | 转换 |                                                           |
|   | 算法  |                                                           |
+---+-------+-----------------------------------------------------------+
| 前 | 05   | `silde <./03_Frontend/05.memory.pdf>`__, `video <>`__     |
| 端 | 内存 |                                                           |
| 优 | 分配 |                                                           |
| 化 | 算法 |                                                           |
+---+-------+-----------------------------------------------------------+
| 前 | 06   | `silde <./03_Frontend/06.constant_fold.pdf>`__,           |
| 端 | 常量 | `video <https://www.bilibili.com/video/BV1P8411W7dY/>`__  |
| 优 | 折叠 |                                                           |
| 化 | 原理 |                                                           |
+---+-------+-----------------------------------------------------------+
| 前 | 07   | `silde <./03_Frontend/07.cse.pdf>`__,                     |
| 端 | 公   | `video <https://www.bilibili.com/video/BV1rv4y1Q7tp/>`__  |
| 优 | 共表 |                                                           |
| 化 | 达式 |                                                           |
|   | 消除  |                                                           |
+---+-------+-----------------------------------------------------------+
| 前 | 08   | `silde <./03_Frontend/08.dce.pdf>`__,                     |
| 端 | 死   | `video <https://www.bilibili.com/video/BV1hD4y1h7nh/>`__  |
| 优 | 代码 |                                                           |
| 化 | 消除 |                                                           |
+---+-------+-----------------------------------------------------------+
| 前 | 09   | `silde <./03_Frontend/09.algebraic.pdf>`__,               |
| 端 | 代数 | `video <https://www.bilibili.com/video/BV1g24y1Q7qC/>`__  |
| 优 | 简化 |                                                           |
| 化 | 原理 |                                                           |
+---+-------+-----------------------------------------------------------+
| 前 | 10   | `silde <./03_Frontend/10.summary.pdf>`__,                 |
| 端 | 优   | `video <https://www.bilibili.com/video/BV1L14y1P7ku/>`__  |
| 优 | 化Pas |                                                          |
| 化 | s排序 |                                                          |
+---+-------+-----------------------------------------------------------+

后端优化
~~~~~~~~

《后端优化》后端优化作为AI编译器跟硬件之间的相连接的模块，更多的是算子或者Kernel进行优化，而优化之前需要把计算图转换称为调度树等IR格式，AI
编译器为了更好地跟硬件打交道，充分赋能硬件，需要后端优化来支持，于是后端针对调度树或者底层IR，在每一个算子/Kernel进行循环优化、指令优化和内存优化等技术。

+---+---------+--------------------------------------------------------+
| 分 | 名称   | 内容                                                   |
| 类 |        |                                                        |
+===+=========+========================================================+
| 后 | 01     | `silde <./04_Backend/01.introduction.pdf>`__,          |
| 端 | A      | `v                                                     |
| 优 | I编译器 | ideo <https://www.bilibili.com/video/BV17D4y177bP/>`__ |
| 化 | 后端优 |                                                        |
|   | 化介绍  |                                                        |
+---+---------+--------------------------------------------------------+
| 后 | 02     | `silde <./04_Backend/02.ops_compute.pdf>`__,           |
| 端 | 算子分 | `v                                                     |
| 优 | 为计算 | ideo <https://www.bilibili.com/video/BV1K84y1x7Be/>`__ |
| 化 | 与调度 |                                                        |
+---+---------+--------------------------------------------------------+
| 后 | 03     | `silde <./04_Backend/03.optimization.pdf>`__,          |
| 端 | 算子   | `v                                                     |
| 优 | 优化手 | ideo <https://www.bilibili.com/video/BV1ZA411X7WZ/>`__ |
| 化 | 工方式 |                                                        |
+---+---------+--------------------------------------------------------+
| 后 | 04     | `silde <./04_Backend/04.loop_opt.pdf>`__,              |
| 端 | 算子循 | `v                                                     |
| 优 | 环优化 | ideo <https://www.bilibili.com/video/BV17D4y177bP/>`__ |
| 化 |        |                                                        |
+---+---------+--------------------------------------------------------+
| 后 | 05     | `silde <./04_Backend/05.other_opt.pdf>`__,             |
| 端 | 指     | `v                                                     |
| 优 | 令和内 | ideo <https://www.bilibili.com/video/BV11d4y1a7J6/>`__ |
| 化 | 存优化 |                                                        |
+---+---------+--------------------------------------------------------+
| 后 | 06     | `silde <./04_Backend/06.auto_tuning.pdf>`__,           |
| 端 | A      | `v                                                     |
| 优 | uto-Tun | ideo <https://www.bilibili.com/video/BV1uA411D7JF/>`__ |
| 化 | ing原理 |                                                       |
+---+---------+--------------------------------------------------------+

多面体技术
~~~~~~~~~~

-  《多面体技术》多面体不属于新的技术，反而是传统编译器的一种优化手段，得益于深度学习中的主要特征（循环、张量），因此多面体技术可以发挥更大的作用，对循环展开、内存映射等优化工作。多面体表示技术作为统一化的程序变换表示技术,
   可以通过迭代域、仿射调度、访存函数等操作对算子或者Kernel进行循环优化和内存映射优化，作为AI编译器的前言研究方向。

PyTorch图模式
~~~~~~~~~~~~~

-  《PyTorch图模式》在充分了解AI编译器后，来深度剖析PyTorch2.0关于图模式的Dynamo是如何实现的，如何对PyTorch的后端执行进行加速。本节会以实际的AI框架
   PyTorch 2.0为主线，去把其主打特性 Dynamo 和 AOTAutograd
   进行展开，并回顾 PyTorch
   对图模式的尝试，了解现今最热门的AI框架如何进行编译器优化的。

+-----+-------------+-------------------------------------------------+
| 分  | 名称        | 内容                                            |
| 类  |             |                                                 |
+=====+=============+=================================================+
| P   | 01          | `silde <./06_PyTorch/01.introduction.pdf>`__,   |
| yTo | PyTorch2.0  | `video <h                                       |
| rch | 特性串讲    | ttps://www.bilibili.com/video/BV1p84y1675B/>`__ |
| 2.0 |             |                                                 |
+-----+-------------+-------------------------------------------------+
| To  | 02          | `silde <./06_PyTorch/02.torchscript.pdf>`__,    |
| rch | TorchScript | `video <h                                       |
| Dyn | 静态图尝试  | ttps://www.bilibili.com/video/BV1JV4y1P7gB/>`__ |
| amo |             |                                                 |
+-----+-------------+-------------------------------------------------+
| To  | 03 Torch FX | `silde <./06_PyTorch/03.torchfx_lazy.pdf>`__,   |
| rch | 与          | `video <h                                       |
| Dyn | LazyTensor  | ttps://www.bilibili.com/video/BV1944y1m7fU/>`__ |
| amo | 特性        |                                                 |
+-----+-------------+-------------------------------------------------+
| To  | 04          | `silde <./06_PyTorch/04.torchdynamo.pdf>`__,    |
| rch | TorchDynamo | `video <h                                       |
| Dyn | 来啦        | ttps://www.bilibili.com/video/BV1Hv4y1R7uc/>`__ |
| amo |             |                                                 |
+-----+-------------+-------------------------------------------------+
| AO  | 05          | `silde <./06_PyTorch/05.aotatuograd.pdf>`__,    |
| TAu | AOTAutograd | `video <h                                       |
| tog | 原理        | ttps://www.bilibili.com/video/BV1Me4y1V7Ke/>`__ |
| rad |             |                                                 |
+-----+-------------+-------------------------------------------------+
| AO  | 06 Dispatch | `silde <./06_PyTorch/06.dispatch.pdf>`__,       |
| TAu | 机制        | `video <h                                       |
| tog |             | ttps://www.bilibili.com/video/BV1L3411d7SM/>`__ |
| rad |             |                                                 |
+-----+-------------+-------------------------------------------------+
